{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 Or maybe the boss says: argh, we\'92re out of memory.\
\
Our list of visitors is too big here. What can we do? \
\
There are algorithms that give you very good estimations.  An example is HyperLogLog.  This description doesn\'92t explain much about what hyperloglog does, but you\'92ll see it follows our monoid pattern. In some ways, great, we don\'92t have to understand it.  We can apply it, and it\'92s a one line change to our code.\
\
If you do want to know what the heck HyperLogLog is, there\'92s a record you can find a nice talk from Papers we Love, on youtube.\
\
An there are many useful algorithms like this. If the boss asks who are the most frequent visitors, we can use another approximating algorithm like count min sketch.  Again the point here is to see the pattern, we\'92re not going to go into the details.  There\'92s a talk from Laura at Twitter you can find at the scala exchange conference web site.\
\
As an aide, those of you using Spark are maybe familiar with this already.  If you\'92re reducing any data, you\'92re maybe using a monoid.\
}