{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 Well, that can go two ways.\
\
You can end up with a surprise in the code, and someone saying: what the hell is this?\
Or you can share the knowledge around, discuss what you want, and then the team can get a \'93It\'92s a monoid, I know this\'94 moment.\
\
This brings us back round to the issue of Scala being complex. It has powerful features, and yes they are involved. But you can grow into them, if you need.\
\
If we look back to 2008, we see Scala described like this: Scala stands for scalable language. It is designed to grow with the demands of its users.\
That quote is from the first chapter of the 
\i Programming in Scala
\i0  book.\
\
The text goes on to talk about being able to write scripts, or complete programmes, but this idea of growing with your demands is one worth keeping in mind. \
\
The picture I have is something like this: where you use the straightforward parts with types whenever you can, dip into the power features if you need it. But you have to share that with your team.  We probably don\'92t take enough time in our teams to talk enough about what we like and don\'92t like.  But if we do, sharing what we learn, things that are complex start to at least become familiar. \
\
}