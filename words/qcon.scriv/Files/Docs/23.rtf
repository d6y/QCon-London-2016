{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 And those two things are: a function for combining, and a value to represent nothing \'97 the starting or empty value.\
\
What would that look like?\
\
If you want to sum numbers, the combiner is addition and the starting point is zero.\
\
If you want to combine text, you start with the empty string, and in Java and Scala use the + operator\
\
Note that we not doing the same thing in each case. But the structure of the problem is the same.  The fact that we use the + operation for numbers and the same symbol, +, for strings\'85 that\'92s not relevant here.  That\'92s not the similarity.  The combine function can be kind of arbitrary, subject to some conditions we\'92ll get to.   The pattern is that there\'92s empty value and way to combine two values.\
\
Another example might help. If you have a set of things, you start with an empty set and union on to it.\
\
And I\'92ve worked with a web framework that let you build up JavaScript expressions: starting with nothing, it used the ampersand symbol as a way to combine JavaScript statements into JavaScript programs.\
\
The general pattern is is: for any type T, you need a zero for the T, and a way to bash two Ts together into one.\
\
}