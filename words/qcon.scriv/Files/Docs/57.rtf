{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 There\'92s a text editor called Atom.\
It\'92s a very nice open source editor from Github.\
\
And there\'92s a project called ENSIME which adds Scala support into various editors, including Atom.\
\
And I wanted to add a feature to it.  There\'92s a bar at the bottom of the editor.  Normally, it\'92s open and shows you details of compiler error and warnings. But when it\'92s closed like this, I want  to see me this summary of errors.\
\
In this project it\'92s telling me about 10 errors.\
\
To get that count, the way this works is \'85 the file is sent across the network to an interface for the compiler, and it sends back various messages.  You don\'92t get  all the messages back in one go, they come back in a stream, which means you get answers quickly as they are found.  \
\
And sometimes you\'92ll get a message saying \'93 hold on, forgot those errors, I\'92ve found something else, and here are some other errors\'94\
\
Does this sound familiar?\
\
We have messages arriving that I want to combine into this summary.\
And we have a reset, that takes us back to no errors and no warnings.\
\
We can say: Its a monid. I know this!\
\
And what that means\'85 well it means we know we need a zero and a way to combine two values, and there are laws to obey\'85\
\
But beyond that we also know what we\'92re going do with those messages\'85we\'92re going to fold over those messages.\
\
This recognition of a pattern guides our next steps at the keyboard. It means, as a developer, I can progress my work.\
I think that\'92s a big part of adopting some of the more functional ideas.\
\
And BTW, that was in CoffeeScript. The ideas in functional programming aren\'92t fixed on a particular language.\
\
}