{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 We'll deal with these ideas in three parts.\
\
I'll start with some Scala, looking at patterns for simple Scala.  We won\'92t spend too much time there.\
\
We'll move on from that and take a look at a really simple functional idea,\
encoding it as a type, and what it gets us.\
\
And in the final part I'll try to share an idea of how this progresses into typelevel programming, where the compiler is doings ome of our work for us.\
\
I\'92ll work through tree examples to try to make this as concrete as possible.\
My focus for all of this is application development. The examples come from that world.\
\
I\'92m presenting these as three distinct examples, although what we see in part 1, helps us in part 2; and what we see in part 2, helps us in part 3. \
\
And at the heart of this is the idea of Scala as a scalable language, in the sense of it scaling with our needs.\
}