{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 The basic pattern we\'92ve seen is this: for any T , we need an empty and a combine.\
\
And the interface for that could be this.  This is two effectively abstract methods. One called called empty that must return a T whenever we implement it. And a function to combine two Ts into one T.\
\
An actual instance of that could for addition could he this.\
This is an instance of our Monoid interface.  It works on Integers.  The empty value is zero. That\'92s what we need to start from for addition to work. And combining two values is adding them.\
\
So we could use addition.empty in a loop, and addition.combine to bring values together in the loop.\
That would be horrible. I might look like this.\
\
And it\'92s horrible because we\'92re missing a theme that will recurr.\
When you have an encoding of something, there\'92s usual a general purpose function to go with it.\
\
Just as we saw earlier: we can encode ADT, and that\'92s mirrored by structural recursion for working on the data structure.\
With monoids there\'92s a general purpose function you\'92re probably going to want to use.\
And that function is called fold.\
}