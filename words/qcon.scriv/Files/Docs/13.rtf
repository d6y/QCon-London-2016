{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 These might be unfamiliar terms to some of you.\
\
Terminology can be daunting.\
Functional programming feels like it has a lot of terminology,\
but that's probably because functional programming are basically bandits, stealing all the good ideas from maths and logic.\
\
Most of the common terms are pretty easy to work through.\
\
I help run an functional programming meet up, and occasionally through some of these terms on a white board, unpick them, and see what they look like in different programming languages. You can get through four or so in an evening. It's good fun. You should try it.\
\
Anyway... these terms...\
\
They are handy labels, for amazingly useful idea.\
\
Algebraic data types is all about data.\
\
Structural recursion is about taking the data apart and doing something with it.\
\
Let's deal with the Algebraic data types first.\
\
This is all about modeling the world in terms of ANDs and ORs.\
\
For example: a visitor to your web site is anonymous or logged in.\
Notice the choice there. The or.\
\
On the other hand, a logged in user is made up of two things.\
an ID, and in the things we know about the user.\
Notice the AND.  \
\
There are just these two patterns to algebraic datatypes: and or also have names, and collectively they are known as algebraic data type.\
\
So what?\
This is kind of modeling leads to a clear style of development.\
Where the structure of the code we need to write, will follow the structure of the data.}